#include <iostream>
#include <stack>
#include <string>
using namespace std;

/*convert expression into postfix notation then evalutate it like a calculator 
 * (6 + 13) * 2 â€“ (5 + 1) / 3
6 13 + 2 * 5 1 + 3 / -*/


string operand = "1234567890";
string operators = "+/-*";

void InToPost(string& postfix, string& infix, stack<char>& post, int digits[]);
void Evaluate(string postfix, stack<int>& result, int digits[]);
void ReadDigits(string infix, string& postfix, int digits[],  int& index, int& arrIterator);
/* this is for semantic errors*/

#include <stdexcept>
using std::runtime_error;
class SemanticError : public runtime_error
{
	public:
		SemanticError(): runtime_error("There is a semantic error here!"){};
};

/*this is for divide by 0 error*/

class Exception : public runtime_error {
	public:
		Exception()
			: runtime_error("cannot divide by 0"){};
		
};



int main(){

	string infix ="";
	string postfix ="";
	string val1 = "";

	stack<char> post;
	stack<int> result;
	bool StepCCompleted = false;
	cout<<"Please type the expression in the format of Infix Notation "<<endl;
	
	getline(cin,infix);
	int digits[infix.length()];
	
	try{
		InToPost(postfix,infix,post,digits);
	}
	catch(SemanticError& e){
		cout<<"exception occurred "<<e.what()<<endl;
		return 0;
	}

	cout<<"The postfix notation is "<<postfix<<endl;

	try{
		Evaluate(postfix, result, digits);
	}
	catch(Exception& e){
		cout<<"Exception occured" << e.what()<<endl;
		return 0;
		
	}

	cout<<"The result: "<<result.top()<<endl;

}

void InToPost(string& postfix, string& infix, stack<char>& post, int digits[]){
	bool StepCCompleted = false;

	int j=0; //iterator for digits[]

	for(int i =0; i<infix.length(); i ++){
		if(operand.find(infix.at(i)) != std::string::npos){
			
			ReadDigits(infix, postfix, digits, i, j);

		}
		else if(infix.at(i) == '('){
			post.push(infix.at(i));
		}
		//this is step c
		else if(operators.find(infix.at(i)) != std::string::npos){
		
			if(!(operand.find(infix.at(i+1)) !=std::string::npos) && (operand.find(infix.at(i-1)) !=std::string::npos)){
				throw SemanticError();
			}
			while(!(StepCCompleted)){
				
				if(post.empty()){
					post.push(infix.at(i));
					StepCCompleted = true;
				}

				else if(post.top() == '('){
					post.push(infix.at(i));
					StepCCompleted = true;
				}

				//this is about finding the priority of the operator in the stack
				else if((infix.at(i) == '*' || infix.at(i) == '/') && (post.top() == '-' || post.top() =='+')){
					post.push(infix.at(i));
					StepCCompleted = true;
				}
				
				else{
					
					char x = post.top();
					postfix+=x;
					post.pop();
					StepCCompleted = false;
					
				}
			}
		}
		//step d
		else if(infix.at(i) == ')'){
			if(post.empty()){
				throw SemanticError();
			}
			if(!(post.empty())){
				
				while((post.top() != '(')){
					char t= post.top();
					postfix += t;
					post.pop();
				}
				if(post.top() == '('){
					post.pop();
				}
			
			}
		}

		StepCCompleted = false;
	}
	while(!(post.empty())){
		char t = post.top();
		post.pop();
		postfix+=t;
	}


}	

void Evaluate(string postfix, stack<int>& result, int digits[]){
	
	int operand1, operand2;
	int j=0;
	for(int i=0;i<postfix.length();i++){

		char num = postfix.at(i);
		if(operand.find(num) != std::string::npos){
			
			result.push(digits[j]);
			
			if(digits[j] > 9){
				i++;
			}
			j++;
		}

		else if(operators.find(postfix.at(i)) != std::string::npos){
			operand2 = result.top();
			result.pop();
			operand1=result.top();
			result.pop();
			/*
			if(operand1 == ''){
				throw SemanticError();
			}*/
			switch(num){
				case '+':
					result.push(operand1 + operand2);
					break;
				case '-':
					result.push(operand1-operand2);
					break;
				case '*':
					result.push(operand1 * operand2);
					break;
				case '/':
					if(operand2 == 0){
						throw Exception();
					}
					else{
						result.push(operand1 / operand2);
						break;
					}
			}
		}
	}


}

void ReadDigits(string infix, string& postfix, int digits[], int& index, int& arrIterator){

	if((index != infix.length() -1) && (operand.find(infix.at(index+1)) != std::string::npos)){
		string val1="";
                val1 += infix.at(index);
                val1 += infix.at(index+1);

                int val2 = stoi(val1);
                digits[arrIterator] = val2;
                postfix +=val1;
               	index++; //this part confuses me like shouldnt i += both chars into post fix???
                arrIterator++;
       }
       else{

	        string val3 ="";
                val3+= infix.at(index);
                int val4 = stoi(val3);
		digits[arrIterator] = val4;

                postfix +=infix.at(index);
                arrIterator++;

       }
}
